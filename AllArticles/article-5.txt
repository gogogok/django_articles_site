Работа с базами данных в Python: SQL и NoSQL решения
Автор: Mate academy
Дата создания: 23.03.2025
Ресурс: https://mate.academy/blog/ru/python-ru/sql-nosql-for-python/

Базы данных являются неотъемлемой частью любого веб-приложения, так как они обеспечивают хранение и доступ к данным. Важно знать, как работать с базами данных, используя язык программирования Python. В этой статье мы рассмотрим различные варианты работы с базами данных, в том числе решения SQL и NoSQL, и покажем практические примеры их использования.

SQL базы данных
SQL базы данных — это реляционные базы данных, которые используют язык структурированных запросов (Structured Query Language, SQL) для создания, управления и обработки данных. Они состоят из таблиц, где данные представлены в виде строк (записей) и столбцов (атрибутов). SQL позволяет выполнять разнообразные операции с данными, такие как выборка, вставка, обновление, удаление, а также более сложные операции, такие как объединение таблиц, группировка данных, фильтрация и сортировка. Некоторые из наиболее популярных SQL баз данных включают MySQL, PostgreSQL, Microsoft SQL Server, Oracle Database и SQLite.

Подключение к SQL базе данных
Python имеет библиотеку SQLite, которая позволяет работать с локальными SQL-базами данных без внешних зависимостей. Для подключения к удаленным SQL базам данных, таким как MySQL или PostgreSQL, можно использовать сторонние библиотеки, такие как mysql-connector-python та psycopg2. Вот пример подключения к SQLite:


import sqlite3

connection = sqlite3.connect("my_database.db")
cursor = connection.cursor()

# Выполнение SQL запроса
cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)")

connection.commit()
connection.close()
Выполнение операций CRUD
Основные операции с базой данных — Create, Read, Update и Delete (CRUD) можно выполнять при помощи SQL запросов. Для вставки данных используется команда INSERT INTO, для выборки — SELECT, для обновления — UPDATE, а для удаления — DELETE.


# Вставка данных
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("John", 25))

# Выборка данных
cursor.execute("SELECT * FROM users")
users = cursor.fetchall()

# Обновление данных
cursor.execute("UPDATE users SET age=? WHERE id=?", (26, 1))

# Удаление данных
cursor.execute("DELETE FROM users WHERE id=?", (1,))
NoSQL базы данных
NoSQL базы данных — это нереляционные системы хранения данных, которые не используют стандартный SQL для обработки данных. Они более гибкие, быстрые, масштабируемые и способны работать с большими объемами неструктурированных данных. Это делает их популярным выбором для использования с языками программирования, такими как Python.

Работа с MongoDB
MongoDB — популярная NoSQL база данных, которая использует документо-ориентированный подход. Для работы с MongoDB в Python можно использовать библиотеку pymongo. Для начала работы необходимо установить pymongo и подключиться к серверу MongoDB:


pip install pymongo

from pymongo import MongoClient

client = MongoClient("mongodb://localhost:27017/")
db = client["my_database"]
collection = db["users"]
Выполнение CRUD операций с MongoDB
Аналогично SQL-базам данных, в MongoDB можно выполнять CRUD операции. Вместо SQL запросов используются методы объекта collection.


# Вставка данных
user = {"name": "John", "age": 25}
result = collection.insert_one(user)
# Выборка данных
users = collection.find()
# Обновление данных
collection.update_one({"_id": result.inserted_id}, {"$set": {"age": 26}})
# Удаление данных
collection.delete_one({"_id": result.inserted_id})
Выбор между SQL и NoSQL базами данных
При выборе базы данных следует учитывать потребности вашего проекта. SQL базы данных подходят для структурированных данных и сильной консистентности, тогда как NoSQL базы данных часто используются для несортированных или полуструктурированных данных и обеспечивают горизонтальное масштабирование.

Выводы
В данной статье мы рассмотрели основные аспекты работы с базами данных в Python, включая SQL и NoSQL решения. Мы узнали, как подключаться к базам данных, выполнять операции CRUD и выбирать между разными типами баз данных. Использование баз данных является ключевым элементом разработки современных веб-приложений, поэтому знание этих аспектов поможет вам стать более эффективным разработчиком.